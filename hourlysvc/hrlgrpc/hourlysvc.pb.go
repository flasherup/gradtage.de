// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.0.0
// source: hourlysvc.proto

package hrlgrpc

import (
	context "context"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Temperature float64 `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *Temperature) Reset() {
	*x = Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperature) ProtoMessage() {}

func (x *Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperature.ProtoReflect.Descriptor instead.
func (*Temperature) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{0}
}

func (x *Temperature) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Temperature) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type GetPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetPeriodRequest) Reset() {
	*x = GetPeriodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodRequest) ProtoMessage() {}

func (x *GetPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetPeriodRequest) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{1}
}

func (x *GetPeriodRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPeriodRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetPeriodRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type GetPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temps []*Temperature `protobuf:"bytes,1,rep,name=temps,proto3" json:"temps,omitempty"`
	Err   string         `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetPeriodResponse) Reset() {
	*x = GetPeriodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodResponse) ProtoMessage() {}

func (x *GetPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetPeriodResponse) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{2}
}

func (x *GetPeriodResponse) GetTemps() []*Temperature {
	if x != nil {
		return x.Temps
	}
	return nil
}

func (x *GetPeriodResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type PushPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Temps []*Temperature `protobuf:"bytes,2,rep,name=temps,proto3" json:"temps,omitempty"`
}

func (x *PushPeriodRequest) Reset() {
	*x = PushPeriodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPeriodRequest) ProtoMessage() {}

func (x *PushPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPeriodRequest.ProtoReflect.Descriptor instead.
func (*PushPeriodRequest) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{3}
}

func (x *PushPeriodRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PushPeriodRequest) GetTemps() []*Temperature {
	if x != nil {
		return x.Temps
	}
	return nil
}

type PushPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *PushPeriodResponse) Reset() {
	*x = PushPeriodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPeriodResponse) ProtoMessage() {}

func (x *PushPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPeriodResponse.ProtoReflect.Descriptor instead.
func (*PushPeriodResponse) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{4}
}

func (x *PushPeriodResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type GetUpdateDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetUpdateDateRequest) Reset() {
	*x = GetUpdateDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateDateRequest) ProtoMessage() {}

func (x *GetUpdateDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateDateRequest.ProtoReflect.Descriptor instead.
func (*GetUpdateDateRequest) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{5}
}

func (x *GetUpdateDateRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetUpdateDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dates map[string]string `protobuf:"bytes,1,rep,name=dates,proto3" json:"dates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Err   string            `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetUpdateDateResponse) Reset() {
	*x = GetUpdateDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateDateResponse) ProtoMessage() {}

func (x *GetUpdateDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateDateResponse.ProtoReflect.Descriptor instead.
func (*GetUpdateDateResponse) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{6}
}

func (x *GetUpdateDateResponse) GetDates() map[string]string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *GetUpdateDateResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type GetLatestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetLatestRequest) Reset() {
	*x = GetLatestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRequest) ProtoMessage() {}

func (x *GetLatestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRequest.ProtoReflect.Descriptor instead.
func (*GetLatestRequest) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{7}
}

func (x *GetLatestRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetLatestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temps map[string]*Temperature `protobuf:"bytes,1,rep,name=temps,proto3" json:"temps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Err   string                  `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetLatestResponse) Reset() {
	*x = GetLatestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hourlysvc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestResponse) ProtoMessage() {}

func (x *GetLatestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hourlysvc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestResponse.ProtoReflect.Descriptor instead.
func (*GetLatestResponse) Descriptor() ([]byte, []int) {
	return file_hourlysvc_proto_rawDescGZIP(), []int{8}
}

func (x *GetLatestResponse) GetTemps() map[string]*Temperature {
	if x != nil {
		return x.Temps
	}
	return nil
}

func (x *GetLatestResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_hourlysvc_proto protoreflect.FileDescriptor

var file_hourlysvc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x0b, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x4a,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x4f, 0x0a,
	0x11, 0x50, 0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x22, 0x26,
	0x0a, 0x12, 0x50, 0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x4e,
	0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb2,
	0x02, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x56, 0x43, 0x12, 0x44, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x2e, 0x68, 0x72, 0x6c, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1a, 0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68,
	0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x68,
	0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x72,
	0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x68, 0x72, 0x6c,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x72, 0x6c, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hourlysvc_proto_rawDescOnce sync.Once
	file_hourlysvc_proto_rawDescData = file_hourlysvc_proto_rawDesc
)

func file_hourlysvc_proto_rawDescGZIP() []byte {
	file_hourlysvc_proto_rawDescOnce.Do(func() {
		file_hourlysvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_hourlysvc_proto_rawDescData)
	})
	return file_hourlysvc_proto_rawDescData
}

var file_hourlysvc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_hourlysvc_proto_goTypes = []interface{}{
	(*Temperature)(nil),           // 0: hrlgrpc.Temperature
	(*GetPeriodRequest)(nil),      // 1: hrlgrpc.GetPeriodRequest
	(*GetPeriodResponse)(nil),     // 2: hrlgrpc.GetPeriodResponse
	(*PushPeriodRequest)(nil),     // 3: hrlgrpc.PushPeriodRequest
	(*PushPeriodResponse)(nil),    // 4: hrlgrpc.PushPeriodResponse
	(*GetUpdateDateRequest)(nil),  // 5: hrlgrpc.GetUpdateDateRequest
	(*GetUpdateDateResponse)(nil), // 6: hrlgrpc.GetUpdateDateResponse
	(*GetLatestRequest)(nil),      // 7: hrlgrpc.GetLatestRequest
	(*GetLatestResponse)(nil),     // 8: hrlgrpc.GetLatestResponse
	nil,                           // 9: hrlgrpc.GetUpdateDateResponse.DatesEntry
	nil,                           // 10: hrlgrpc.GetLatestResponse.TempsEntry
}
var file_hourlysvc_proto_depIdxs = []int32{
	0,  // 0: hrlgrpc.GetPeriodResponse.temps:type_name -> hrlgrpc.Temperature
	0,  // 1: hrlgrpc.PushPeriodRequest.temps:type_name -> hrlgrpc.Temperature
	9,  // 2: hrlgrpc.GetUpdateDateResponse.dates:type_name -> hrlgrpc.GetUpdateDateResponse.DatesEntry
	10, // 3: hrlgrpc.GetLatestResponse.temps:type_name -> hrlgrpc.GetLatestResponse.TempsEntry
	0,  // 4: hrlgrpc.GetLatestResponse.TempsEntry.value:type_name -> hrlgrpc.Temperature
	1,  // 5: hrlgrpc.HourlySVC.GetPeriod:input_type -> hrlgrpc.GetPeriodRequest
	3,  // 6: hrlgrpc.HourlySVC.PushPeriod:input_type -> hrlgrpc.PushPeriodRequest
	5,  // 7: hrlgrpc.HourlySVC.GetUpdateDate:input_type -> hrlgrpc.GetUpdateDateRequest
	7,  // 8: hrlgrpc.HourlySVC.GetLatest:input_type -> hrlgrpc.GetLatestRequest
	2,  // 9: hrlgrpc.HourlySVC.GetPeriod:output_type -> hrlgrpc.GetPeriodResponse
	4,  // 10: hrlgrpc.HourlySVC.PushPeriod:output_type -> hrlgrpc.PushPeriodResponse
	6,  // 11: hrlgrpc.HourlySVC.GetUpdateDate:output_type -> hrlgrpc.GetUpdateDateResponse
	8,  // 12: hrlgrpc.HourlySVC.GetLatest:output_type -> hrlgrpc.GetLatestResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_hourlysvc_proto_init() }
func file_hourlysvc_proto_init() {
	if File_hourlysvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hourlysvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeriodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeriodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPeriodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPeriodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hourlysvc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hourlysvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hourlysvc_proto_goTypes,
		DependencyIndexes: file_hourlysvc_proto_depIdxs,
		MessageInfos:      file_hourlysvc_proto_msgTypes,
	}.Build()
	File_hourlysvc_proto = out.File
	file_hourlysvc_proto_rawDesc = nil
	file_hourlysvc_proto_goTypes = nil
	file_hourlysvc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HourlySVCClient is the client API for HourlySVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HourlySVCClient interface {
	GetPeriod(ctx context.Context, in *GetPeriodRequest, opts ...grpc.CallOption) (*GetPeriodResponse, error)
	PushPeriod(ctx context.Context, in *PushPeriodRequest, opts ...grpc.CallOption) (*PushPeriodResponse, error)
	GetUpdateDate(ctx context.Context, in *GetUpdateDateRequest, opts ...grpc.CallOption) (*GetUpdateDateResponse, error)
	GetLatest(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (*GetLatestResponse, error)
}

type hourlySVCClient struct {
	cc grpc.ClientConnInterface
}

func NewHourlySVCClient(cc grpc.ClientConnInterface) HourlySVCClient {
	return &hourlySVCClient{cc}
}

func (c *hourlySVCClient) GetPeriod(ctx context.Context, in *GetPeriodRequest, opts ...grpc.CallOption) (*GetPeriodResponse, error) {
	out := new(GetPeriodResponse)
	err := c.cc.Invoke(ctx, "/hrlgrpc.HourlySVC/GetPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hourlySVCClient) PushPeriod(ctx context.Context, in *PushPeriodRequest, opts ...grpc.CallOption) (*PushPeriodResponse, error) {
	out := new(PushPeriodResponse)
	err := c.cc.Invoke(ctx, "/hrlgrpc.HourlySVC/PushPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hourlySVCClient) GetUpdateDate(ctx context.Context, in *GetUpdateDateRequest, opts ...grpc.CallOption) (*GetUpdateDateResponse, error) {
	out := new(GetUpdateDateResponse)
	err := c.cc.Invoke(ctx, "/hrlgrpc.HourlySVC/GetUpdateDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hourlySVCClient) GetLatest(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (*GetLatestResponse, error) {
	out := new(GetLatestResponse)
	err := c.cc.Invoke(ctx, "/hrlgrpc.HourlySVC/GetLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HourlySVCServer is the server API for HourlySVC service.
type HourlySVCServer interface {
	GetPeriod(context.Context, *GetPeriodRequest) (*GetPeriodResponse, error)
	PushPeriod(context.Context, *PushPeriodRequest) (*PushPeriodResponse, error)
	GetUpdateDate(context.Context, *GetUpdateDateRequest) (*GetUpdateDateResponse, error)
	GetLatest(context.Context, *GetLatestRequest) (*GetLatestResponse, error)
}

// UnimplementedHourlySVCServer can be embedded to have forward compatible implementations.
type UnimplementedHourlySVCServer struct {
}

func (*UnimplementedHourlySVCServer) GetPeriod(context.Context, *GetPeriodRequest) (*GetPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriod not implemented")
}
func (*UnimplementedHourlySVCServer) PushPeriod(context.Context, *PushPeriodRequest) (*PushPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPeriod not implemented")
}
func (*UnimplementedHourlySVCServer) GetUpdateDate(context.Context, *GetUpdateDateRequest) (*GetUpdateDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateDate not implemented")
}
func (*UnimplementedHourlySVCServer) GetLatest(context.Context, *GetLatestRequest) (*GetLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatest not implemented")
}

func RegisterHourlySVCServer(s *grpc.Server, srv HourlySVCServer) {
	s.RegisterService(&_HourlySVC_serviceDesc, srv)
}

func _HourlySVC_GetPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HourlySVCServer).GetPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrlgrpc.HourlySVC/GetPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HourlySVCServer).GetPeriod(ctx, req.(*GetPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HourlySVC_PushPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HourlySVCServer).PushPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrlgrpc.HourlySVC/PushPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HourlySVCServer).PushPeriod(ctx, req.(*PushPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HourlySVC_GetUpdateDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HourlySVCServer).GetUpdateDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrlgrpc.HourlySVC/GetUpdateDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HourlySVCServer).GetUpdateDate(ctx, req.(*GetUpdateDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HourlySVC_GetLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HourlySVCServer).GetLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrlgrpc.HourlySVC/GetLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HourlySVCServer).GetLatest(ctx, req.(*GetLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HourlySVC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hrlgrpc.HourlySVC",
	HandlerType: (*HourlySVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeriod",
			Handler:    _HourlySVC_GetPeriod_Handler,
		},
		{
			MethodName: "PushPeriod",
			Handler:    _HourlySVC_PushPeriod_Handler,
		},
		{
			MethodName: "GetUpdateDate",
			Handler:    _HourlySVC_GetUpdateDate_Handler,
		},
		{
			MethodName: "GetLatest",
			Handler:    _HourlySVC_GetLatest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hourlysvc.proto",
}
